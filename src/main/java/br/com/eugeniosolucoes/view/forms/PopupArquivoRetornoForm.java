/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

 /*
 * PopupForm.java
 *
 * Created on 21/10/2010, 13:22:20
 */
package br.com.eugeniosolucoes.view.forms;

import br.com.eugeniosolucoes.service.ArquivoDeRetornoService;
import br.com.eugeniosolucoes.service.impl.ArquivoDeRetornoServiceImpl;
import br.com.eugeniosolucoes.util.MyFilter;
import br.com.eugeniosolucoes.view.model.DadosBoletoPagoModel;
import java.awt.Dimension;
import java.awt.HeadlessException;
import java.awt.Toolkit;
import java.io.File;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTextArea;

/**
 *
 * @author eugenio
 */
public class PopupArquivoRetornoForm extends BaseDialog {

    static final Logger LOG = Logger.getLogger( PopupArquivoRetornoForm.class.getName() );

    private final ArquivoDeRetornoService service = new ArquivoDeRetornoServiceImpl();

    /**
     * Creates new form FormPopup
     *
     * @param parent
     * @param modal
     */
    public PopupArquivoRetornoForm( java.awt.Frame parent, boolean modal ) {
        super( parent, BaseForm.SYSTEM_TITLE, modal );
        initComponents();
        configSize();
    }

    private void configSize() throws HeadlessException {
        Dimension tela = Toolkit.getDefaultToolkit().getScreenSize();
        setBounds( ( tela.width - getSize().width ) / 2, ( tela.height - getSize().height ) / 2,
                getSize().width, getSize().height );
    }

    public PopupArquivoRetornoForm( java.awt.Frame parent, boolean modal, int largura, int altura ) {
        super( parent, BaseForm.SYSTEM_TITLE, modal );
        initComponents();
        configCustomSize( largura, altura );
    }

    public PopupArquivoRetornoForm( java.awt.Frame parent, boolean modal, String title, int largura, int altura ) {
        super( parent, title, modal );
        initComponents();
        configCustomSize( largura, altura );
    }    
    
    private void configCustomSize( int largura, int altura ) throws HeadlessException {
        this.setSize( largura, altura );
        Dimension tela = Toolkit.getDefaultToolkit().getScreenSize();
        setBounds( ( tela.width - getSize().width ) / 2, ( tela.height - getSize().height ) / 2,
                getSize().width, getSize().height );
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings( "unchecked" )
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlControle = new javax.swing.JPanel();
        btnProcessarArquivos = new javax.swing.JButton();
        btnAbrirNotaForm = new javax.swing.JButton();
        pnlLog = new javax.swing.JPanel();
        scrollLog = new javax.swing.JScrollPane();
        txtLog = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        btnProcessarArquivos.setText("Selecionar Arquivo(s) de Retorno(s)");
        btnProcessarArquivos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnProcessarArquivosActionPerformed(evt);
            }
        });
        pnlControle.add(btnProcessarArquivos);

        btnAbrirNotaForm.setEnabled(false);
        btnAbrirNotaForm.setLabel("Existem boletos pagos! Deseja enviar o Lote RPS?");
        btnAbrirNotaForm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAbrirNotaFormActionPerformed(evt);
            }
        });
        pnlControle.add(btnAbrirNotaForm);

        txtLog.setEditable(false);
        txtLog.setColumns(20);
        txtLog.setRows(5);
        scrollLog.setViewportView(txtLog);

        javax.swing.GroupLayout pnlLogLayout = new javax.swing.GroupLayout(pnlLog);
        pnlLog.setLayout(pnlLogLayout);
        pnlLogLayout.setHorizontalGroup(
            pnlLogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 623, Short.MAX_VALUE)
            .addGroup(pnlLogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(pnlLogLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(scrollLog, javax.swing.GroupLayout.DEFAULT_SIZE, 603, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        pnlLogLayout.setVerticalGroup(
            pnlLogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 325, Short.MAX_VALUE)
            .addGroup(pnlLogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(scrollLog, javax.swing.GroupLayout.DEFAULT_SIZE, 325, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlLog, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlControle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlControle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlLog, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnProcessarArquivosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnProcessarArquivosActionPerformed

        final String title = this.getTitle();
        final JButton btn = this.btnProcessarArquivos;
        final JButton btnNota = this.btnAbrirNotaForm;
        final StringBuilder sb = new StringBuilder();
        final JTextArea jta = this.txtLog;
        new Thread( new Runnable() {
            @Override
            public void run() {
                int contarPago = 0;
                try {
                    btn.setEnabled( false );
                    JFileChooser arquivo = new JFileChooser();
                    arquivo.setDialogTitle( "Selecione o(s) arquivo(s) de retorno." );
                    arquivo.setMultiSelectionEnabled( true );
                    arquivo.setDialogType( JFileChooser.OPEN_DIALOG );
                    arquivo.setFileFilter( new MyFilter( "txt" ) );
                    arquivo.setFileSelectionMode( JFileChooser.FILES_AND_DIRECTORIES );

                    int r = arquivo.showDialog( null, "Selecionar" );
                    
                    if ( r == JFileChooser.APPROVE_OPTION ) {
                        try {
                            File[] files = arquivo.getSelectedFiles();
                            for ( File file : files ) {
                                List<DadosBoletoPagoModel> boletosPagos = service.lerArquivoDeRetorno( file );
                                sb.append( String.format( "Arquivo: %s%n%s", file.getName(), 
                                        boletosPagos.isEmpty() ? 
                                                "OBS: O referido arquivo não possui boletos pagos.\n" : 
                                                "Matrícula | Nosso Número | Mensalidade |    Data    |   Valor   | Nome\n" ) );
                                jta.setText( sb.toString() );
                                for ( DadosBoletoPagoModel boletoPago : boletosPagos ) {
                                    service.processarBaixaDeBoleto( boletoPago );
                                    contarPago++;
                                    sb.append( String.format( "%-11s %-14s %-12s  %td/%tm/%tY     %.2f    %-50s%n", 
                                            boletoPago.getMatricula(), 
                                            boletoPago.getNossoNumero(),
                                            boletoPago.getNumeroMensalidade(),
                                            boletoPago.getPagamento(),
                                            boletoPago.getPagamento(),
                                            boletoPago.getPagamento(),
                                            boletoPago.getValor(), 
                                            boletoPago.getAluno() ) );
                                    jta.setText( sb.toString() );
                                }
                                sb.append( "\n" );
                                jta.setText( sb.toString() );
                            }
                        } catch ( Exception ex ) {
                            LOG.log( Level.SEVERE, ex.getMessage(), ex );
                            JOptionPane.showMessageDialog( null, "Erro ao processar o(s) arquivo(s)!", title, JOptionPane.ERROR_MESSAGE );
                        }
                    }
                } catch ( Exception e ) {
                    LOG.log( Level.SEVERE, e.getMessage(), e );
                } finally {
                    btn.setEnabled( true );
                    btnNota.setEnabled( contarPago > 0 );
                }
            }
        } ).start();
    }//GEN-LAST:event_btnProcessarArquivosActionPerformed

    private void btnAbrirNotaFormActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAbrirNotaFormActionPerformed
        NotaForm notaForm = new NotaForm(null, "Enviar Lote RPS", true, 1000, 600);
        notaForm.setVisible( true );
    }//GEN-LAST:event_btnAbrirNotaFormActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAbrirNotaForm;
    private javax.swing.JButton btnProcessarArquivos;
    private javax.swing.JPanel pnlControle;
    private javax.swing.JPanel pnlLog;
    private javax.swing.JScrollPane scrollLog;
    private javax.swing.JTextArea txtLog;
    // End of variables declaration//GEN-END:variables

}
